package visaogrupo.com.br.kleyhertz.Utils.DB;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import android.util.Log;

import androidx.annotation.NonNull;

import java.util.ArrayList;
import java.util.Arrays;

public abstract class DAOHelper {

    private static final String TAG_CLASS = "DAO HELPER";

    public interface Adapter<T extends DAOHelper> {
        void onRead(T dao, Cursor cursor) throws Exception;
    }

    private SQLiteDatabase _db;

    public DAOHelper(SQLiteDatabase db) {
        this._db = db;
    }

    public SQLiteDatabase getDB() {
        return _db;
    }

    /**
     * Executa query e verifica se tem parametros. Query sem retorno
     *
     * @param query
     * @param param
     */
    public int executaUpdateDelete(String query, Object... param) {
        SQLiteStatement command;
        int position = 0;

        command = _db.compileStatement(query);

        if (param.length > 0) {
            command.clearBindings();
            for (Object o: param) {
                position++;
                if(o instanceof String) {
                    command.bindString(position, (String) o);
                } else if (o instanceof Integer) {
                    command.bindLong(position, (Integer) o);
                } else if (o instanceof Boolean) {
                    command.bindLong(position, ((Boolean) o) ? 1 : 0);
                } else if (o instanceof Double || o instanceof Float) {
                    command.bindDouble(position, (Double) o);
                } else if (o instanceof byte[]) {
                    command.bindBlob(position, (byte[]) o);
                } else if (o == null) {
                    command.bindNull(position);
                }
            }
        }

        try {
            return command.executeUpdateDelete();
        } finally {
            command.close();
        }
    }

    public void executaNoQuery(String query, Object... param) {
        SQLiteStatement command;
        int position = 0;

        command = _db.compileStatement(query);

        if (param.length > 0) {
            command.clearBindings();
            for (Object object : param) {
                position++;

                if (object instanceof String) {
                    command.bindString(position, (String) object);
                } else if (object instanceof Integer) {
                    command.bindLong(position, (Integer) object);
                } else if (object instanceof Boolean) {
                    command.bindLong(position, ((Boolean) object) ? 1 : 0);
                } else if (object instanceof Double || object instanceof Float) {
                    command.bindDouble(position, (Double) object);
                } else if (object instanceof byte[]) {
                    command.bindBlob(position, (byte[]) object);
                } else if (object == null) {
                    command.bindNull(position);
                }
            }
        }
        try {
            command.execute();
        } catch (Exception e) {
            Log.e(TAG_CLASS, "Erro no banco: " + e);
        } finally {
            command.close();
        }
    }

    public Cursor executaQuery(String query, Object...param) {
        ArrayList<String> mArr = new ArrayList<>();
        for(Object o: param) {
            mArr.add(String.valueOf(o));
        }
        String[] paramObj = Arrays.copyOf(
                mArr.toArray(),
                mArr.size(),
                String[].class
        );
        Cursor cursor = _db.rawQuery(query, paramObj);
        cursor.moveToFirst();
        return cursor;
    }

    public String getString(Cursor cursor, String campo) {
        return cursor.getString(cursor.getColumnIndex(campo));
    }

    public int getInt(Cursor cursor, String campo) {
        return cursor.getInt(cursor.getColumnIndex(campo));
    }


    public double getDouble(Cursor cursor, String campo) {
        return cursor.getDouble(cursor.getColumnIndex(campo));
    }

    public byte[] getBlob(Cursor cursor, String campo) {
        return cursor.getBlob(cursor.getColumnIndex(campo));
    }

    public void doRead(final Cursor cursor, @NonNull final DAOHelper.Adapter adapter) throws Exception {
        //Verifica se o cursor não esta nulo
        if (cursor != null) {
            try {
                //Verifica se é um cursor valido
                if (cursor.moveToFirst() && cursor.getCount() > 0) {
                    do {
                        adapter.onRead(this, cursor);
                    } while (cursor.moveToNext()); //Loop
                }
            } finally {
                cursor.close();
            }
        }
    }

    public abstract void truncate();

}
